name: Validate YAML Files in Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  validate_yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - name: Get Changed Files
      id: get_changed_files
      run: |
        changed_files=$(git diff --name-only HEAD^..HEAD)
        echo "Changed Files"
        echo "$changed_files"

        if [ -n "$changed_files" ]; then
          yaml_files=$(echo "$changed_files" | grep '\.yaml$')
          echo "Found yaml files"
          echo "$yaml_files"

        else
          echo "No YAML files were changed."
          exit 0  # Safely exit the action
        fi

        files_with_spec_name=()

        for file in $yaml_files; do
          foundDomainName=$(yq '.spec.name // ""' "$file")
          if [ -n "$foundDomainName" ]; then
            # Append the filename to the array
            files_with_spec_name+=("$file")
          fi
        done

        if [ ${#files_with_spec_name[@]} -eq 0 ]; then
          echo "No files with .spec.name found. Exiting cleanly."
          exit 0
        fi

        echo "Files with .spec.name:"
        # Print all elements of the array
        for file in "${files_with_spec_name[@]}"; do
          echo "$file"
        done


        for file in ${files_with_spec_name[@]}; do
          echo "Processing file: $file"
          foundDomainName=$(yq '.spec.name // ""' "$file")
          echo "Validating domain name: $foundDomainName"


          # make api call to Google Cloud NLP
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "document": {
                "type": "PLAIN_TEXT",
                "content": "'"$foundDomainName"'",
                "languageCode": "en"
              }
            }' \
            "https://language.googleapis.com/v2/documents:analyzeSentiment?key=${{secrets.GOOGLE_CLOUD_NLP_API_KEY}}")

          # Validate $response and extract sentiment score
          sentiment_score=$(echo "$response" | jq -r '.documentSentiment.score')
          
          echo "Sentiment Score: $sentiment_score"

          # Check if sentiment score is negative
          if (( $(echo "$sentiment_score < 0" | bc -l) )); then
            echo "Domain name seems to have a negative sentiment score. Please reconsider."
            echo "Domain name: $foundDomainName"
            found_issues=true
          fi

        done